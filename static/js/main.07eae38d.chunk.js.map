{"version":3,"sources":["utils/useResizeObserver.js","components/Geo/GeoChart.js","components/Geo/GeoChart.component.js","utils/apiCall.js","components/total-stats/total-stats.component.js","utils/useInterval.js","App.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","GeoChart","report","data","property","selectedCountryFeature","handleSelectCountry","svgRef","useRef","wrapperRef","selectedCountry","setSelectedCountry","svg","select","minProp","min","features","feature","properties","maxProp","max","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","console","log","attr","transition","text","name","toLocaleString","style","marginBottom","className","GeoChartComponent","props","React","countryFeature","setCountryFeature","setselectedCountryFeature","countryDetails","Country","toLowerCase","trim","TotalCases","NewCases","TotalDeaths","TotalRecovered","ActiveCases","TotCases_1M_Pop","getReport","a","axios","get","then","response","reports","TotalStats","title","place","value","useInterval","callback","delay","savedCallback","id","setInterval","clearInterval","App","setData","currentCountry","setCurrentCountry","currentCountryDetails","setCurrentCountryDetails","table","NewDeaths","allReports","country","cases","deaths","recovered","active_cases","currently_infected_patients","closed_cases","cases_which_had_an_outcome","Serious_Critical","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07eae38d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n/**\r\n * Hook, that returns the current dimensions of an HTML element.\r\n * Doesn't play well with SVG.\r\n */\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport useResizeObserver from \"./../../utils/useResizeObserver\";\r\n\r\n/**\r\n * Component that renders a map of Germany.\r\n */\r\n\r\nfunction GeoChart({\r\n  report,\r\n  data,\r\n  property = \"pop_est\",\r\n  selectedCountryFeature,\r\n  handleSelectCountry\r\n}) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  const [selectedCountry, setSelectedCountry] = useState(\r\n    selectedCountryFeature\r\n  );\r\n\r\n  // will be called initially and on every data change\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const minProp = min(data.features, feature => feature.properties[property]);\r\n    const maxProp = max(data.features, feature => feature.properties[property]);\r\n    const colorScale = scaleLinear()\r\n      .domain([minProp, maxProp])\r\n      .range([\"#1a2032\", \"#00e3ff\"]);\r\n\r\n    // use resized dimensions\r\n    // but fall back to getBoundingClientRect, if no dimensions yet.\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n    // projects geo-coordinates on a 2D plane\r\n    const projection = geoMercator()\r\n      .fitSize([width, height], selectedCountry || data)\r\n      .precision(100);\r\n\r\n    // takes geojson data,\r\n    // transforms that into the d attribute of a path element\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    // render each country\r\n    svg\r\n      .selectAll(\".country\")\r\n      .data(data.features)\r\n      .join(\"path\")\r\n      .on(\"click\", feature => {\r\n        handleSelectCountry(feature);\r\n        console.log(feature);\r\n        setSelectedCountry(selectedCountry === feature ? null : feature);\r\n      })\r\n      .attr(\"class\", \"country\")\r\n      .transition()\r\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\r\n      .attr(\"d\", feature => pathGenerator(feature));\r\n\r\n    // render text\r\n    svg\r\n      .selectAll(\".label\")\r\n      .data([selectedCountry])\r\n      .join(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .text(\r\n        feature =>\r\n          feature &&\r\n          feature.properties.name +\r\n            \": \" +\r\n            feature.properties[property].toLocaleString()\r\n      )\r\n      .attr(\"x\", 100)\r\n      .attr(\"y\", 25);\r\n  }, [data, dimensions, property, selectedCountry, handleSelectCountry]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }} className=\"map\">\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GeoChart;\r\n","import React from \"react\";\r\nimport GeoChart from \"./GeoChart\";\r\nimport data from \"./GeoChart.world.geo.json\";\r\nimport \"./GeoChart.css\";\r\n\r\nconst GeoChartComponent = props => {\r\n  const [countryFeature, setCountryFeature] = React.useState();\r\n  const [selectedCountryFeature, setselectedCountryFeature] = React.useState();\r\n\r\n  React.useEffect(() => {\r\n    data.features.forEach(feature => {\r\n      if (\r\n        props.countryDetails.Country.toLowerCase().trim() ===\r\n        feature.properties.name.toLowerCase().trim()\r\n      ) {\r\n        console.log(feature.properties.name);\r\n        setCountryFeature(feature);\r\n      }\r\n    });\r\n  }, [props, countryFeature]);\r\n\r\n  const handleCountrySelection = feature => {\r\n    console.log(feature);\r\n    props.report[0].forEach(countryDetails => {\r\n      if (\r\n        feature.properties.name.toLowerCase().trim() ===\r\n        countryDetails.Country.toLowerCase().trim()\r\n      ) {\r\n        console.log(countryDetails);\r\n        setselectedCountryFeature(countryDetails);\r\n      }\r\n    });\r\n    //setselectedCountryFeature(feature);\r\n  };\r\n\r\n  return (\r\n    <div className=\"geoChartContainer\">\r\n      <h3>World Map According to Population</h3>\r\n      <GeoChart\r\n        report={props.report}\r\n        data={data}\r\n        selectedCountryFeature={countryFeature}\r\n        handleSelectCountry={name => handleCountrySelection(name)}\r\n      />\r\n      <div className=\"countryWise\">\r\n        <div className=\"country\">\r\n          <h2>My Country</h2>\r\n          <span>{props.countryDetails.Country}</span>\r\n          <span>TotalCases: {props.countryDetails.TotalCases}</span>\r\n          <span>NewCases: {props.countryDetails.NewCases}</span>\r\n          <span>TotalDeaths: {props.countryDetails.TotalDeaths}</span>\r\n          <span>TotalRecovered: {props.countryDetails.TotalRecovered}</span>\r\n          <span>ActiveCases: {props.countryDetails.ActiveCases}</span>\r\n          <span>TotCases_1M_Pop: {props.countryDetails.TotCases_1M_Pop}</span>\r\n        </div>\r\n        <div className=\"country\">\r\n          <h2>Selected Country</h2>\r\n          {selectedCountryFeature ? (\r\n            <>\r\n              <span>{selectedCountryFeature.Country}</span>\r\n              <span>TotalCases: {selectedCountryFeature.TotalCases}</span>\r\n              <span>NewCases: {selectedCountryFeature.NewCases}</span>\r\n              <span>TotalDeaths: {selectedCountryFeature.TotalDeaths}</span>\r\n              <span>\r\n                TotalRecovered: {selectedCountryFeature.TotalRecovered}\r\n              </span>\r\n              <span>ActiveCases: {selectedCountryFeature.ActiveCases}</span>\r\n              <span>\r\n                TotCases_1M_Pop: {selectedCountryFeature.TotCases_1M_Pop}\r\n              </span>\r\n            </>\r\n          ) : (\r\n            \"Select Any Country\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoChartComponent;\r\n","import axios from \"axios\";\r\nvar total_report = {};\r\nexport const getReport = async () => {\r\n  return await axios\r\n    .get(\"https://covid19-server.chrismichael.now.sh/api/v1/AllReports\")\r\n    .then(response => {\r\n      console.log(response.data.reports[0]);\r\n      // var data = processData(response.data, \"confirm\");\r\n      //getConfirmedDeath();\r\n      return response.data.reports[0];\r\n    });\r\n};\r\n\r\nexport const getConfirmedDeath = async () => {\r\n  return await axios.get(\"/FatalityRateByAge\").then(response => {\r\n    console.log(response);\r\n    var data = processData(response.data, \"death\");\r\n    getConfirmedRecovered();\r\n    return data;\r\n  });\r\n};\r\n\r\nexport const getConfirmedRecovered = async () => {\r\n  return await axios\r\n    .get(\"/time_series_19-covid-Recovered.csv\")\r\n    .then(response => {\r\n      console.log(response);\r\n      var data = processData(response.data, \"recovered\");\r\n      return data;\r\n    });\r\n};\r\n\r\nvar currentCountry = undefined;\r\nfunction processData(allText, caseType) {\r\n  var allTextLines = allText.split(/\\r\\n|\\n/);\r\n  // console.log(allTextLines);\r\n  var headers = allTextLines[0].split(\",\");\r\n  var previousCases = undefined;\r\n  var newCases = 0;\r\n  var tarr = undefined;\r\n  for (var i = 1; i < allTextLines.length; i++) {\r\n    var data = allTextLines[i].split(\",\");\r\n    if (data.length === headers.length) {\r\n      // for (var j = 0; j < headers.length; j++) {\r\n      //   previousCases = parseInt(data[headers.length - 1]);\r\n      // }\r\n      var country = data[1];\r\n      var key = caseType; //confirm or recover or death\r\n      if (currentCountry === undefined || currentCountry === country) {\r\n        currentCountry = data[1];\r\n        tarr =\r\n          parseInt(data[headers.length - 1]) +\r\n          (tarr !== undefined ? parseInt(tarr) : 0);\r\n\r\n        previousCases =\r\n          parseInt(data[headers.length - 2]) +\r\n          (previousCases !== undefined ? parseInt(previousCases) : 0);\r\n      } else if (currentCountry !== country) {\r\n        var type = {};\r\n        type[key] = tarr;\r\n        type[key + \"newCase\"] = tarr - previousCases;\r\n        console.log(\"new COuntry :: \" + currentCountry);\r\n        console.log(total_report[currentCountry]);\r\n        total_report[currentCountry] = Object.assign(\r\n          {},\r\n          total_report[currentCountry],\r\n          type\r\n        );\r\n        console.log(total_report[currentCountry]);\r\n        tarr = parseInt(data[headers.length - 1]);\r\n        previousCases = parseInt(data[headers.length - 2]);\r\n        currentCountry = country;\r\n      }\r\n    }\r\n    // console.log(\r\n    //   country + \" : \" + tarr[key] + \" --- \" + data[headers.length - 1]\r\n    // );\r\n  }\r\n\r\n  console.log(\"caseType---------\" + caseType);\r\n  console.log(total_report);\r\n  return total_report;\r\n  // alert(lines);\r\n}\r\n","import React from \"react\";\r\nimport \"./total-stats.styles.css\";\r\n\r\nconst TotalStats = props => {\r\n  return (\r\n    <div className=\"totalstat\">\r\n      <div className=\"title\">{props.title}</div>\r\n      <div className=\"place\">{props.place}</div>\r\n      <div className=\"value\">{props.value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalStats;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * Hook, that makes setInterval work with functional components.\r\n */\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GeoChartComponent from \"./components/Geo/GeoChart.component\";\nimport { getReport } from \"./utils/apiCall\";\nimport TotalStats from \"./components/total-stats/total-stats.component\";\nimport useInterval from \"./utils/useInterval\";\nimport axios from \"axios\";\nfunction App() {\n  const [data, setData] = React.useState(null);\n  const [currentCountry, setCurrentCountry] = React.useState();\n  const [currentCountryDetails, setCurrentCountryDetails] = React.useState(\n    null\n  );\n\n  React.useEffect(() => {\n    // GetReport();\n    async function allReports() {\n      const report = await getReport();\n      console.log(report);\n      console.log(report.table[0][200].NewDeaths);\n\n      setData(report);\n    }\n    allReports();\n  }, []);\n\n  useInterval(() => {\n    async function allReports() {\n      const report = await getReport();\n      console.log(report);\n      console.log(report.table[0][200].NewDeaths);\n\n      setData(report);\n    }\n    allReports();\n  }, 500000);\n\n  React.useEffect(() => {\n    console.log(\"coutny\");\n    axios.get(\"http://ip-api.com/json/?fields=country\").then(response => {\n      console.log(response);\n      setCurrentCountry(response.data.country);\n    });\n    if (data && currentCountry) {\n      console.log(currentCountry);\n      data.table[0].forEach(countryDetails => {\n        if (\n          currentCountry.toLowerCase().trim() ===\n          countryDetails.Country.toLowerCase().trim()\n        ) {\n          console.log(countryDetails);\n          setCurrentCountryDetails(countryDetails);\n        }\n      });\n    }\n  }, [data, currentCountry, currentCountryDetails]);\n\n  if (data == null || currentCountryDetails == null) {\n    return <div className=\"App\">Loading....</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>COVID-19 Latest Updates</h1>\n      <div className=\"detailsBox\">\n        <TotalStats place=\"World\" value={data.cases} title=\"Total Cases\" />\n        <TotalStats place=\"World\" value={data.deaths} title=\"Total Deaths\" />\n        <TotalStats\n          place=\"World\"\n          value={data.recovered}\n          title=\"Total Recovered\"\n        />\n        <TotalStats\n          place=\"World\"\n          value={data.active_cases[0].currently_infected_patients}\n          title=\"Active Cases\"\n        />\n        <TotalStats\n          place=\"World\"\n          value={data.closed_cases[0].cases_which_had_an_outcome}\n          title=\"Closed Cases\"\n        />\n\n        <TotalStats\n          place=\"World\"\n          value={data.table[0][200].NewCases}\n          title=\"New Cases\"\n        />\n        <TotalStats\n          place=\"World\"\n          value={data.table[0][200].NewDeaths}\n          title=\"New Deaths\"\n        />\n        <TotalStats\n          place=\"World\"\n          value={data.table[0][200].Serious_Critical}\n          title=\"Critical Cases\"\n        />\n      </div>\n      <GeoChartComponent\n        report={data.table}\n        countryDetails={currentCountryDetails}\n      ></GeoChartComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}